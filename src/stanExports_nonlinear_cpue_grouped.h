// Generated by rstantools.  Do not edit by hand.

/*
    csdm is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    csdm is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with csdm.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_nonlinear_cpue_grouped_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_nonlinear_cpue_grouped");
    reader.add_event(193, 191, "end", "model_nonlinear_cpue_grouped");
    return reader;
}
template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type>
saturating_dynamics(const T0__& time,
                        const std::vector<T1__>& state,
                        const std::vector<T2__>& theta,
                        const std::vector<T3__>& x_r,
                        const std::vector<int>& x_i, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 3;
        validate_non_negative_index("dxdt", "1", 1);
        std::vector<local_scalar_t__  > dxdt(1, local_scalar_t__(DUMMY_VAR__));
        stan::math::initialize(dxdt, DUMMY_VAR__);
        stan::math::fill(dxdt, DUMMY_VAR__);
        current_statement_begin__ = 5;
        stan::model::assign(dxdt, 
                    stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                    ((-(get_base1(state, 1, "state", 1)) * get_base1(theta, 1, "theta", 1)) / (1 + ((get_base1(state, 1, "state", 1) * get_base1(theta, 1, "theta", 1)) / get_base1(theta, 2, "theta", 1)))), 
                    "assigning variable dxdt");
        current_statement_begin__ = 6;
        return stan::math::promote_scalar<fun_return_scalar_t__>(dxdt);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct saturating_dynamics_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__>
        std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type>
    operator()(const T0__& time,
                        const std::vector<T1__>& state,
                        const std::vector<T2__>& theta,
                        const std::vector<T3__>& x_r,
                        const std::vector<int>& x_i, std::ostream* pstream__) const {
        return saturating_dynamics(time, state, theta, x_r, x_i, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_nonlinear_cpue_grouped
  : public stan::model::model_base_crtp<model_nonlinear_cpue_grouped> {
private:
        int N;
        std::vector<int> G;
        std::vector<std::vector<int> > gg;
        vector_d cpue_obs;
        std::vector<double> effort;
        std::vector<double> lnq_range;
        std::vector<double> lns_range;
        std::vector<double> B0_range;
        double B0_logmean_prior;
        double lnq_mean_prior;
        double lns_mean_prior;
        double B0_logmean_prior_sd;
        double lnq_mean_prior_sd;
        double lns_mean_prior_sd;
        double B0_group_prior_logsd;
        double lnq_group_prior_sd;
        double lns_group_prior_sd;
        double cpue_process_error_prior_sd;
        vector_d caught;
        vector_d total_caught;
        std::vector<double> x_r;
        std::vector<int> x_i;
        std::vector<int> gg_start;
        std::vector<int> gg_end;
        std::vector<int> gg_length;
public:
    model_nonlinear_cpue_grouped(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_nonlinear_cpue_grouped(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_nonlinear_cpue_grouped_namespace::model_nonlinear_cpue_grouped";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 11;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            check_greater_or_equal(function__, "N", N, 0);
            current_statement_begin__ = 12;
            validate_non_negative_index("G", "3", 3);
            context__.validate_dims("data initialization", "G", "int", context__.to_vec(3));
            G = std::vector<int>(3, int(0));
            vals_i__ = context__.vals_i("G");
            pos__ = 0;
            size_t G_k_0_max__ = 3;
            for (size_t k_0__ = 0; k_0__ < G_k_0_max__; ++k_0__) {
                G[k_0__] = vals_i__[pos__++];
            }
            size_t G_i_0_max__ = 3;
            for (size_t i_0__ = 0; i_0__ < G_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "G[i_0__]", G[i_0__], 0);
            }
            current_statement_begin__ = 19;
            validate_non_negative_index("gg", "N", N);
            validate_non_negative_index("gg", "3", 3);
            context__.validate_dims("data initialization", "gg", "int", context__.to_vec(N,3));
            gg = std::vector<std::vector<int> >(N, std::vector<int>(3, int(0)));
            vals_i__ = context__.vals_i("gg");
            pos__ = 0;
            size_t gg_k_0_max__ = N;
            size_t gg_k_1_max__ = 3;
            for (size_t k_1__ = 0; k_1__ < gg_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < gg_k_0_max__; ++k_0__) {
                    gg[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            size_t gg_i_0_max__ = N;
            size_t gg_i_1_max__ = 3;
            for (size_t i_0__ = 0; i_0__ < gg_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < gg_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "gg[i_0__][i_1__]", gg[i_0__][i_1__], 1);
                    check_less_or_equal(function__, "gg[i_0__][i_1__]", gg[i_0__][i_1__], get_base1(G, 1, "G", 1));
                }
            }
            current_statement_begin__ = 20;
            validate_non_negative_index("cpue_obs", "N", N);
            context__.validate_dims("data initialization", "cpue_obs", "vector_d", context__.to_vec(N));
            cpue_obs = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            vals_r__ = context__.vals_r("cpue_obs");
            pos__ = 0;
            size_t cpue_obs_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < cpue_obs_j_1_max__; ++j_1__) {
                cpue_obs(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 21;
            validate_non_negative_index("effort", "N", N);
            context__.validate_dims("data initialization", "effort", "double", context__.to_vec(N));
            effort = std::vector<double>(N, double(0));
            vals_r__ = context__.vals_r("effort");
            pos__ = 0;
            size_t effort_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < effort_k_0_max__; ++k_0__) {
                effort[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 22;
            validate_non_negative_index("lnq_range", "2", 2);
            context__.validate_dims("data initialization", "lnq_range", "double", context__.to_vec(2));
            lnq_range = std::vector<double>(2, double(0));
            vals_r__ = context__.vals_r("lnq_range");
            pos__ = 0;
            size_t lnq_range_k_0_max__ = 2;
            for (size_t k_0__ = 0; k_0__ < lnq_range_k_0_max__; ++k_0__) {
                lnq_range[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 23;
            validate_non_negative_index("lns_range", "2", 2);
            context__.validate_dims("data initialization", "lns_range", "double", context__.to_vec(2));
            lns_range = std::vector<double>(2, double(0));
            vals_r__ = context__.vals_r("lns_range");
            pos__ = 0;
            size_t lns_range_k_0_max__ = 2;
            for (size_t k_0__ = 0; k_0__ < lns_range_k_0_max__; ++k_0__) {
                lns_range[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 24;
            validate_non_negative_index("B0_range", "2", 2);
            context__.validate_dims("data initialization", "B0_range", "double", context__.to_vec(2));
            B0_range = std::vector<double>(2, double(0));
            vals_r__ = context__.vals_r("B0_range");
            pos__ = 0;
            size_t B0_range_k_0_max__ = 2;
            for (size_t k_0__ = 0; k_0__ < B0_range_k_0_max__; ++k_0__) {
                B0_range[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 27;
            context__.validate_dims("data initialization", "B0_logmean_prior", "double", context__.to_vec());
            B0_logmean_prior = double(0);
            vals_r__ = context__.vals_r("B0_logmean_prior");
            pos__ = 0;
            B0_logmean_prior = vals_r__[pos__++];
            check_greater_or_equal(function__, "B0_logmean_prior", B0_logmean_prior, stan::math::log(get_base1(B0_range, 1, "B0_range", 1)));
            check_less_or_equal(function__, "B0_logmean_prior", B0_logmean_prior, stan::math::log(get_base1(B0_range, 2, "B0_range", 1)));
            current_statement_begin__ = 28;
            context__.validate_dims("data initialization", "lnq_mean_prior", "double", context__.to_vec());
            lnq_mean_prior = double(0);
            vals_r__ = context__.vals_r("lnq_mean_prior");
            pos__ = 0;
            lnq_mean_prior = vals_r__[pos__++];
            check_greater_or_equal(function__, "lnq_mean_prior", lnq_mean_prior, get_base1(lnq_range, 1, "lnq_range", 1));
            check_less_or_equal(function__, "lnq_mean_prior", lnq_mean_prior, get_base1(lnq_range, 2, "lnq_range", 1));
            current_statement_begin__ = 29;
            context__.validate_dims("data initialization", "lns_mean_prior", "double", context__.to_vec());
            lns_mean_prior = double(0);
            vals_r__ = context__.vals_r("lns_mean_prior");
            pos__ = 0;
            lns_mean_prior = vals_r__[pos__++];
            check_greater_or_equal(function__, "lns_mean_prior", lns_mean_prior, get_base1(lns_range, 1, "lns_range", 1));
            check_less_or_equal(function__, "lns_mean_prior", lns_mean_prior, get_base1(lns_range, 2, "lns_range", 1));
            current_statement_begin__ = 32;
            context__.validate_dims("data initialization", "B0_logmean_prior_sd", "double", context__.to_vec());
            B0_logmean_prior_sd = double(0);
            vals_r__ = context__.vals_r("B0_logmean_prior_sd");
            pos__ = 0;
            B0_logmean_prior_sd = vals_r__[pos__++];
            check_greater_or_equal(function__, "B0_logmean_prior_sd", B0_logmean_prior_sd, 0);
            current_statement_begin__ = 33;
            context__.validate_dims("data initialization", "lnq_mean_prior_sd", "double", context__.to_vec());
            lnq_mean_prior_sd = double(0);
            vals_r__ = context__.vals_r("lnq_mean_prior_sd");
            pos__ = 0;
            lnq_mean_prior_sd = vals_r__[pos__++];
            check_greater_or_equal(function__, "lnq_mean_prior_sd", lnq_mean_prior_sd, 0);
            current_statement_begin__ = 34;
            context__.validate_dims("data initialization", "lns_mean_prior_sd", "double", context__.to_vec());
            lns_mean_prior_sd = double(0);
            vals_r__ = context__.vals_r("lns_mean_prior_sd");
            pos__ = 0;
            lns_mean_prior_sd = vals_r__[pos__++];
            check_greater_or_equal(function__, "lns_mean_prior_sd", lns_mean_prior_sd, 0);
            current_statement_begin__ = 37;
            context__.validate_dims("data initialization", "B0_group_prior_logsd", "double", context__.to_vec());
            B0_group_prior_logsd = double(0);
            vals_r__ = context__.vals_r("B0_group_prior_logsd");
            pos__ = 0;
            B0_group_prior_logsd = vals_r__[pos__++];
            check_greater_or_equal(function__, "B0_group_prior_logsd", B0_group_prior_logsd, 0);
            current_statement_begin__ = 38;
            context__.validate_dims("data initialization", "lnq_group_prior_sd", "double", context__.to_vec());
            lnq_group_prior_sd = double(0);
            vals_r__ = context__.vals_r("lnq_group_prior_sd");
            pos__ = 0;
            lnq_group_prior_sd = vals_r__[pos__++];
            check_greater_or_equal(function__, "lnq_group_prior_sd", lnq_group_prior_sd, 0);
            current_statement_begin__ = 39;
            context__.validate_dims("data initialization", "lns_group_prior_sd", "double", context__.to_vec());
            lns_group_prior_sd = double(0);
            vals_r__ = context__.vals_r("lns_group_prior_sd");
            pos__ = 0;
            lns_group_prior_sd = vals_r__[pos__++];
            check_greater_or_equal(function__, "lns_group_prior_sd", lns_group_prior_sd, 0);
            current_statement_begin__ = 41;
            context__.validate_dims("data initialization", "cpue_process_error_prior_sd", "double", context__.to_vec());
            cpue_process_error_prior_sd = double(0);
            vals_r__ = context__.vals_r("cpue_process_error_prior_sd");
            pos__ = 0;
            cpue_process_error_prior_sd = vals_r__[pos__++];
            check_greater_or_equal(function__, "cpue_process_error_prior_sd", cpue_process_error_prior_sd, 0);
            // initialize transformed data variables
            current_statement_begin__ = 45;
            validate_non_negative_index("caught", "N", N);
            caught = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            stan::math::fill(caught, DUMMY_VAR__);
            current_statement_begin__ = 46;
            validate_non_negative_index("total_caught", "get_base1(G, 1, \"G\", 1)", get_base1(G, 1, "G", 1));
            total_caught = Eigen::Matrix<double, Eigen::Dynamic, 1>(get_base1(G, 1, "G", 1));
            stan::math::fill(total_caught, DUMMY_VAR__);
            current_statement_begin__ = 47;
            validate_non_negative_index("x_r", "0", 0);
            x_r = std::vector<double>(0, double(0));
            stan::math::fill(x_r, DUMMY_VAR__);
            current_statement_begin__ = 48;
            validate_non_negative_index("x_i", "0", 0);
            x_i = std::vector<int>(0, int(0));
            stan::math::fill(x_i, std::numeric_limits<int>::min());
            current_statement_begin__ = 49;
            validate_non_negative_index("gg_start", "get_base1(G, 1, \"G\", 1)", get_base1(G, 1, "G", 1));
            gg_start = std::vector<int>(get_base1(G, 1, "G", 1), int(0));
            stan::math::fill(gg_start, std::numeric_limits<int>::min());
            current_statement_begin__ = 50;
            validate_non_negative_index("gg_end", "get_base1(G, 1, \"G\", 1)", get_base1(G, 1, "G", 1));
            gg_end = std::vector<int>(get_base1(G, 1, "G", 1), int(0));
            stan::math::fill(gg_end, std::numeric_limits<int>::min());
            current_statement_begin__ = 51;
            validate_non_negative_index("gg_length", "get_base1(G, 1, \"G\", 1)", get_base1(G, 1, "G", 1));
            gg_length = std::vector<int>(get_base1(G, 1, "G", 1), int(0));
            stan::math::fill(gg_length, std::numeric_limits<int>::min());
            // execute transformed data statements
            {
            current_statement_begin__ = 59;
            int current_gg(0);
            (void) current_gg;  // dummy to suppress unused var warning
            stan::math::fill(current_gg, std::numeric_limits<int>::min());
            stan::math::assign(current_gg,1);
            current_statement_begin__ = 60;
            stan::model::assign(gg_start, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                        1, 
                        "assigning variable gg_start");
            current_statement_begin__ = 61;
            for (int n = 1; n <= (N - 1); ++n) {
                current_statement_begin__ = 62;
                if (as_bool(logical_gt(get_base1(get_base1(gg, (n + 1), "gg", 1), 1, "gg", 2), get_base1(get_base1(gg, n, "gg", 1), 1, "gg", 2)))) {
                    current_statement_begin__ = 63;
                    stan::model::assign(gg_end, 
                                stan::model::cons_list(stan::model::index_uni(current_gg), stan::model::nil_index_list()), 
                                n, 
                                "assigning variable gg_end");
                    current_statement_begin__ = 64;
                    stan::model::assign(gg_start, 
                                stan::model::cons_list(stan::model::index_uni((current_gg + 1)), stan::model::nil_index_list()), 
                                (n + 1), 
                                "assigning variable gg_start");
                    current_statement_begin__ = 65;
                    stan::math::assign(current_gg, (current_gg + 1));
                }
            }
            }
            current_statement_begin__ = 69;
            stan::model::assign(gg_end, 
                        stan::model::cons_list(stan::model::index_uni(get_base1(G, 1, "G", 1)), stan::model::nil_index_list()), 
                        N, 
                        "assigning variable gg_end");
            current_statement_begin__ = 70;
            for (int g = 1; g <= get_base1(G, 1, "G", 1); ++g) {
                current_statement_begin__ = 71;
                stan::model::assign(gg_length, 
                            stan::model::cons_list(stan::model::index_uni(g), stan::model::nil_index_list()), 
                            ((get_base1(gg_end, g, "gg_end", 1) - get_base1(gg_start, g, "gg_start", 1)) + 1), 
                            "assigning variable gg_length");
            }
            current_statement_begin__ = 75;
            for (int i = 1; i <= N; ++i) {
                current_statement_begin__ = 76;
                stan::model::assign(caught, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (get_base1(effort, i, "effort", 1) * get_base1(cpue_obs, i, "cpue_obs", 1)), 
                            "assigning variable caught");
            }
            current_statement_begin__ = 82;
            for (int i = 1; i <= get_base1(G, 1, "G", 1); ++i) {
                current_statement_begin__ = 83;
                stan::model::assign(total_caught, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            sum(stan::model::rvalue(caught, stan::model::cons_list(stan::model::index_min_max(get_base1(gg_start, i, "gg_start", 1), get_base1(gg_end, i, "gg_end", 1)), stan::model::nil_index_list()), "caught")), 
                            "assigning variable total_caught");
            }
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 89;
            num_params_r__ += 1;
            current_statement_begin__ = 90;
            num_params_r__ += 1;
            current_statement_begin__ = 91;
            num_params_r__ += 1;
            current_statement_begin__ = 92;
            num_params_r__ += 1;
            current_statement_begin__ = 93;
            num_params_r__ += 1;
            current_statement_begin__ = 94;
            num_params_r__ += 1;
            current_statement_begin__ = 95;
            num_params_r__ += 1;
            current_statement_begin__ = 96;
            validate_non_negative_index("B0_raw", "get_base1(G, 1, \"G\", 1)", get_base1(G, 1, "G", 1));
            num_params_r__ += get_base1(G, 1, "G", 1);
            current_statement_begin__ = 97;
            validate_non_negative_index("lnq", "get_base1(G, 2, \"G\", 1)", get_base1(G, 2, "G", 1));
            num_params_r__ += get_base1(G, 2, "G", 1);
            current_statement_begin__ = 98;
            validate_non_negative_index("lns", "get_base1(G, 3, \"G\", 1)", get_base1(G, 3, "G", 1));
            num_params_r__ += get_base1(G, 3, "G", 1);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_nonlinear_cpue_grouped() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 89;
        if (!(context__.contains_r("cpue_process_error")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable cpue_process_error missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("cpue_process_error");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "cpue_process_error", "double", context__.to_vec());
        double cpue_process_error(0);
        cpue_process_error = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, cpue_process_error);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable cpue_process_error: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 90;
        if (!(context__.contains_r("B0_mean")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable B0_mean missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("B0_mean");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "B0_mean", "double", context__.to_vec());
        double B0_mean(0);
        B0_mean = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(get_base1(B0_range, 1, "B0_range", 1), get_base1(B0_range, 2, "B0_range", 1), B0_mean);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable B0_mean: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 91;
        if (!(context__.contains_r("lnq_mean")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable lnq_mean missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("lnq_mean");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "lnq_mean", "double", context__.to_vec());
        double lnq_mean(0);
        lnq_mean = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(get_base1(lnq_range, 1, "lnq_range", 1), get_base1(lnq_range, 2, "lnq_range", 1), lnq_mean);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable lnq_mean: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 92;
        if (!(context__.contains_r("lns_mean")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable lns_mean missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("lns_mean");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "lns_mean", "double", context__.to_vec());
        double lns_mean(0);
        lns_mean = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(get_base1(lns_range, 1, "lns_range", 1), get_base1(lns_range, 2, "lns_range", 1), lns_mean);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable lns_mean: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 93;
        if (!(context__.contains_r("B0_group_logsd")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable B0_group_logsd missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("B0_group_logsd");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "B0_group_logsd", "double", context__.to_vec());
        double B0_group_logsd(0);
        B0_group_logsd = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, B0_group_logsd);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable B0_group_logsd: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 94;
        if (!(context__.contains_r("lnq_group_sd")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable lnq_group_sd missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("lnq_group_sd");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "lnq_group_sd", "double", context__.to_vec());
        double lnq_group_sd(0);
        lnq_group_sd = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, lnq_group_sd);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable lnq_group_sd: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 95;
        if (!(context__.contains_r("lns_group_sd")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable lns_group_sd missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("lns_group_sd");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "lns_group_sd", "double", context__.to_vec());
        double lns_group_sd(0);
        lns_group_sd = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, lns_group_sd);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable lns_group_sd: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 96;
        if (!(context__.contains_r("B0_raw")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable B0_raw missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("B0_raw");
        pos__ = 0U;
        validate_non_negative_index("B0_raw", "get_base1(G, 1, \"G\", 1)", get_base1(G, 1, "G", 1));
        context__.validate_dims("parameter initialization", "B0_raw", "vector_d", context__.to_vec(get_base1(G, 1, "G", 1)));
        Eigen::Matrix<double, Eigen::Dynamic, 1> B0_raw(get_base1(G, 1, "G", 1));
        size_t B0_raw_j_1_max__ = get_base1(G, 1, "G", 1);
        for (size_t j_1__ = 0; j_1__ < B0_raw_j_1_max__; ++j_1__) {
            B0_raw(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lub_unconstrain(0, get_base1(B0_range, 2, "B0_range", 1), B0_raw);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable B0_raw: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 97;
        if (!(context__.contains_r("lnq")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable lnq missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("lnq");
        pos__ = 0U;
        validate_non_negative_index("lnq", "get_base1(G, 2, \"G\", 1)", get_base1(G, 2, "G", 1));
        context__.validate_dims("parameter initialization", "lnq", "vector_d", context__.to_vec(get_base1(G, 2, "G", 1)));
        Eigen::Matrix<double, Eigen::Dynamic, 1> lnq(get_base1(G, 2, "G", 1));
        size_t lnq_j_1_max__ = get_base1(G, 2, "G", 1);
        for (size_t j_1__ = 0; j_1__ < lnq_j_1_max__; ++j_1__) {
            lnq(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lub_unconstrain(get_base1(lnq_range, 1, "lnq_range", 1), get_base1(lnq_range, 2, "lnq_range", 1), lnq);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable lnq: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 98;
        if (!(context__.contains_r("lns")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable lns missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("lns");
        pos__ = 0U;
        validate_non_negative_index("lns", "get_base1(G, 3, \"G\", 1)", get_base1(G, 3, "G", 1));
        context__.validate_dims("parameter initialization", "lns", "vector_d", context__.to_vec(get_base1(G, 3, "G", 1)));
        Eigen::Matrix<double, Eigen::Dynamic, 1> lns(get_base1(G, 3, "G", 1));
        size_t lns_j_1_max__ = get_base1(G, 3, "G", 1);
        for (size_t j_1__ = 0; j_1__ < lns_j_1_max__; ++j_1__) {
            lns(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lub_unconstrain(get_base1(lns_range, 1, "lns_range", 1), get_base1(lns_range, 2, "lns_range", 1), lns);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable lns: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 89;
            local_scalar_t__ cpue_process_error;
            (void) cpue_process_error;  // dummy to suppress unused var warning
            if (jacobian__)
                cpue_process_error = in__.scalar_lb_constrain(0, lp__);
            else
                cpue_process_error = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 90;
            local_scalar_t__ B0_mean;
            (void) B0_mean;  // dummy to suppress unused var warning
            if (jacobian__)
                B0_mean = in__.scalar_lub_constrain(get_base1(B0_range, 1, "B0_range", 1), get_base1(B0_range, 2, "B0_range", 1), lp__);
            else
                B0_mean = in__.scalar_lub_constrain(get_base1(B0_range, 1, "B0_range", 1), get_base1(B0_range, 2, "B0_range", 1));
            current_statement_begin__ = 91;
            local_scalar_t__ lnq_mean;
            (void) lnq_mean;  // dummy to suppress unused var warning
            if (jacobian__)
                lnq_mean = in__.scalar_lub_constrain(get_base1(lnq_range, 1, "lnq_range", 1), get_base1(lnq_range, 2, "lnq_range", 1), lp__);
            else
                lnq_mean = in__.scalar_lub_constrain(get_base1(lnq_range, 1, "lnq_range", 1), get_base1(lnq_range, 2, "lnq_range", 1));
            current_statement_begin__ = 92;
            local_scalar_t__ lns_mean;
            (void) lns_mean;  // dummy to suppress unused var warning
            if (jacobian__)
                lns_mean = in__.scalar_lub_constrain(get_base1(lns_range, 1, "lns_range", 1), get_base1(lns_range, 2, "lns_range", 1), lp__);
            else
                lns_mean = in__.scalar_lub_constrain(get_base1(lns_range, 1, "lns_range", 1), get_base1(lns_range, 2, "lns_range", 1));
            current_statement_begin__ = 93;
            local_scalar_t__ B0_group_logsd;
            (void) B0_group_logsd;  // dummy to suppress unused var warning
            if (jacobian__)
                B0_group_logsd = in__.scalar_lb_constrain(0, lp__);
            else
                B0_group_logsd = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 94;
            local_scalar_t__ lnq_group_sd;
            (void) lnq_group_sd;  // dummy to suppress unused var warning
            if (jacobian__)
                lnq_group_sd = in__.scalar_lb_constrain(0, lp__);
            else
                lnq_group_sd = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 95;
            local_scalar_t__ lns_group_sd;
            (void) lns_group_sd;  // dummy to suppress unused var warning
            if (jacobian__)
                lns_group_sd = in__.scalar_lb_constrain(0, lp__);
            else
                lns_group_sd = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 96;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> B0_raw;
            (void) B0_raw;  // dummy to suppress unused var warning
            if (jacobian__)
                B0_raw = in__.vector_lub_constrain(0, get_base1(B0_range, 2, "B0_range", 1), get_base1(G, 1, "G", 1), lp__);
            else
                B0_raw = in__.vector_lub_constrain(0, get_base1(B0_range, 2, "B0_range", 1), get_base1(G, 1, "G", 1));
            current_statement_begin__ = 97;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> lnq;
            (void) lnq;  // dummy to suppress unused var warning
            if (jacobian__)
                lnq = in__.vector_lub_constrain(get_base1(lnq_range, 1, "lnq_range", 1), get_base1(lnq_range, 2, "lnq_range", 1), get_base1(G, 2, "G", 1), lp__);
            else
                lnq = in__.vector_lub_constrain(get_base1(lnq_range, 1, "lnq_range", 1), get_base1(lnq_range, 2, "lnq_range", 1), get_base1(G, 2, "G", 1));
            current_statement_begin__ = 98;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> lns;
            (void) lns;  // dummy to suppress unused var warning
            if (jacobian__)
                lns = in__.vector_lub_constrain(get_base1(lns_range, 1, "lns_range", 1), get_base1(lns_range, 2, "lns_range", 1), get_base1(G, 3, "G", 1), lp__);
            else
                lns = in__.vector_lub_constrain(get_base1(lns_range, 1, "lns_range", 1), get_base1(lns_range, 2, "lns_range", 1), get_base1(G, 3, "G", 1));
            // transformed parameters
            current_statement_begin__ = 102;
            validate_non_negative_index("q", "get_base1(G, 2, \"G\", 1)", get_base1(G, 2, "G", 1));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> q(get_base1(G, 2, "G", 1));
            stan::math::initialize(q, DUMMY_VAR__);
            stan::math::fill(q, DUMMY_VAR__);
            current_statement_begin__ = 103;
            validate_non_negative_index("s", "get_base1(G, 3, \"G\", 1)", get_base1(G, 3, "G", 1));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> s(get_base1(G, 3, "G", 1));
            stan::math::initialize(s, DUMMY_VAR__);
            stan::math::fill(s, DUMMY_VAR__);
            current_statement_begin__ = 105;
            validate_non_negative_index("B0", "get_base1(G, 1, \"G\", 1)", get_base1(G, 1, "G", 1));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> B0(get_base1(G, 1, "G", 1));
            stan::math::initialize(B0, DUMMY_VAR__);
            stan::math::fill(B0, DUMMY_VAR__);
            stan::math::assign(B0,add(B0_raw, total_caught));
            current_statement_begin__ = 106;
            validate_non_negative_index("biomass_ts", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> biomass_ts(N);
            stan::math::initialize(biomass_ts, DUMMY_VAR__);
            stan::math::fill(biomass_ts, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 107;
            for (int i = 1; i <= get_base1(G, 1, "G", 1); ++i) {
                current_statement_begin__ = 108;
                stan::model::assign(biomass_ts, 
                            stan::model::cons_list(stan::model::index_uni(get_base1(gg_start, i, "gg_start", 1)), stan::model::nil_index_list()), 
                            get_base1(B0, i, "B0", 1), 
                            "assigning variable biomass_ts");
                current_statement_begin__ = 109;
                for (int j = 1; j <= (get_base1(gg_length, i, "gg_length", 1) - 1); ++j) {
                    current_statement_begin__ = 112;
                    stan::model::assign(biomass_ts, 
                                stan::model::cons_list(stan::model::index_uni((get_base1(gg_start, i, "gg_start", 1) + j)), stan::model::nil_index_list()), 
                                (get_base1(biomass_ts, ((get_base1(gg_start, i, "gg_start", 1) + j) - 1), "biomass_ts", 1) - get_base1(caught, ((get_base1(gg_start, i, "gg_start", 1) + j) - 1), "caught", 1)), 
                                "assigning variable biomass_ts");
                }
            }
            current_statement_begin__ = 116;
            stan::math::assign(q, stan::math::exp(lnq));
            current_statement_begin__ = 117;
            stan::math::assign(s, stan::math::exp(lns));
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 102;
            size_t q_j_1_max__ = get_base1(G, 2, "G", 1);
            for (size_t j_1__ = 0; j_1__ < q_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(q(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: q" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable q: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 103;
            size_t s_j_1_max__ = get_base1(G, 3, "G", 1);
            for (size_t j_1__ = 0; j_1__ < s_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(s(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: s" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable s: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 105;
            size_t B0_j_1_max__ = get_base1(G, 1, "G", 1);
            for (size_t j_1__ = 0; j_1__ < B0_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(B0(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: B0" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable B0: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 106;
            size_t biomass_ts_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < biomass_ts_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(biomass_ts(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: biomass_ts" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable biomass_ts: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            // model body
            {
            current_statement_begin__ = 121;
            validate_non_negative_index("dyn_pars", "2", 2);
            std::vector<local_scalar_t__  > dyn_pars(2, local_scalar_t__(DUMMY_VAR__));
            stan::math::initialize(dyn_pars, DUMMY_VAR__);
            stan::math::fill(dyn_pars, DUMMY_VAR__);
            current_statement_begin__ = 122;
            validate_non_negative_index("state", "1", 1);
            std::vector<local_scalar_t__  > state(1, local_scalar_t__(DUMMY_VAR__));
            stan::math::initialize(state, DUMMY_VAR__);
            stan::math::fill(state, DUMMY_VAR__);
            current_statement_begin__ = 123;
            validate_non_negative_index("biomass_expected", "N", N);
            validate_non_negative_index("biomass_expected", "1", 1);
            std::vector<std::vector<local_scalar_t__  >  > biomass_expected(N, std::vector<local_scalar_t__>(1, local_scalar_t__(DUMMY_VAR__)));
            stan::math::initialize(biomass_expected, DUMMY_VAR__);
            stan::math::fill(biomass_expected, DUMMY_VAR__);
            current_statement_begin__ = 124;
            validate_non_negative_index("cpue_expected", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> cpue_expected(N);
            stan::math::initialize(cpue_expected, DUMMY_VAR__);
            stan::math::fill(cpue_expected, DUMMY_VAR__);
            current_statement_begin__ = 127;
            lp_accum__.add(lognormal_log<propto__>(B0_mean, B0_logmean_prior, B0_logmean_prior_sd));
            current_statement_begin__ = 128;
            lp_accum__.add(normal_log<propto__>(lnq_mean, lnq_mean_prior, lnq_mean_prior_sd));
            current_statement_begin__ = 129;
            lp_accum__.add(normal_log<propto__>(lns_mean, lns_mean_prior, lns_mean_prior_sd));
            current_statement_begin__ = 132;
            lp_accum__.add(normal_log<propto__>(B0_group_logsd, 0, B0_group_prior_logsd));
            current_statement_begin__ = 133;
            lp_accum__.add(normal_log<propto__>(lnq_group_sd, 0, lnq_group_prior_sd));
            current_statement_begin__ = 134;
            lp_accum__.add(normal_log<propto__>(lns_group_sd, 0, lns_group_prior_sd));
            current_statement_begin__ = 137;
            lp_accum__.add(lognormal_log<propto__>(B0, stan::math::log(B0_mean), B0_group_logsd));
            current_statement_begin__ = 138;
            lp_accum__.add(normal_log<propto__>(lnq, lnq_mean, lnq_group_sd));
            current_statement_begin__ = 139;
            lp_accum__.add(normal_log<propto__>(lns, lns_mean, lns_group_sd));
            current_statement_begin__ = 142;
            lp_accum__.add(normal_log<propto__>(cpue_process_error, 0, cpue_process_error_prior_sd));
            current_statement_begin__ = 144;
            for (int g = 1; g <= get_base1(G, 1, "G", 1); ++g) {
                {
                current_statement_begin__ = 145;
                int g_start(0);
                (void) g_start;  // dummy to suppress unused var warning
                stan::math::fill(g_start, std::numeric_limits<int>::min());
                stan::math::assign(g_start,get_base1(gg_start, g, "gg_start", 1));
                current_statement_begin__ = 146;
                int g_end(0);
                (void) g_end;  // dummy to suppress unused var warning
                stan::math::fill(g_end, std::numeric_limits<int>::min());
                stan::math::assign(g_end,get_base1(gg_end, g, "gg_end", 1));
                current_statement_begin__ = 149;
                int B0_current(0);
                (void) B0_current;  // dummy to suppress unused var warning
                stan::math::fill(B0_current, std::numeric_limits<int>::min());
                stan::math::assign(B0_current,get_base1(get_base1(gg, g_start, "gg", 1), 1, "gg", 2));
                current_statement_begin__ = 150;
                int lnq_current(0);
                (void) lnq_current;  // dummy to suppress unused var warning
                stan::math::fill(lnq_current, std::numeric_limits<int>::min());
                stan::math::assign(lnq_current,get_base1(get_base1(gg, g_start, "gg", 1), 2, "gg", 2));
                current_statement_begin__ = 151;
                int lns_current(0);
                (void) lns_current;  // dummy to suppress unused var warning
                stan::math::fill(lns_current, std::numeric_limits<int>::min());
                stan::math::assign(lns_current,get_base1(get_base1(gg, g_start, "gg", 1), 3, "gg", 2));
                current_statement_begin__ = 152;
                stan::model::assign(dyn_pars, 
                            stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                            get_base1(q, lnq_current, "q", 1), 
                            "assigning variable dyn_pars");
                current_statement_begin__ = 153;
                stan::model::assign(dyn_pars, 
                            stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()), 
                            get_base1(s, lns_current, "s", 1), 
                            "assigning variable dyn_pars");
                current_statement_begin__ = 154;
                for (int n = g_start; n <= g_end; ++n) {
                    current_statement_begin__ = 155;
                    stan::model::assign(state, 
                                stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                                get_base1(biomass_ts, n, "biomass_ts", 1), 
                                "assigning variable state");
                    current_statement_begin__ = 156;
                    stan::model::assign(biomass_expected, 
                                stan::model::cons_list(stan::model::index_min_max(n, n), stan::model::nil_index_list()), 
                                integrate_ode_rk45(saturating_dynamics_functor__(), state, 0, stan::model::rvalue(effort, stan::model::cons_list(stan::model::index_min_max(n, n), stan::model::nil_index_list()), "effort"), dyn_pars, x_r, x_i, pstream__), 
                                "assigning variable biomass_expected");
                    current_statement_begin__ = 159;
                    stan::model::assign(cpue_expected, 
                                stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                ((get_base1(biomass_ts, n, "biomass_ts", 1) - get_base1(get_base1(biomass_expected, n, "biomass_expected", 1), 1, "biomass_expected", 2)) / get_base1(effort, n, "effort", 1)), 
                                "assigning variable cpue_expected");
                }
                }
            }
            current_statement_begin__ = 163;
            lp_accum__.add(normal_log<propto__>(cpue_obs, cpue_expected, cpue_process_error));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("cpue_process_error");
        names__.push_back("B0_mean");
        names__.push_back("lnq_mean");
        names__.push_back("lns_mean");
        names__.push_back("B0_group_logsd");
        names__.push_back("lnq_group_sd");
        names__.push_back("lns_group_sd");
        names__.push_back("B0_raw");
        names__.push_back("lnq");
        names__.push_back("lns");
        names__.push_back("q");
        names__.push_back("s");
        names__.push_back("B0");
        names__.push_back("biomass_ts");
        names__.push_back("cpue_fit");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(get_base1(G, 1, "G", 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(get_base1(G, 2, "G", 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(get_base1(G, 3, "G", 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(get_base1(G, 2, "G", 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(get_base1(G, 3, "G", 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(get_base1(G, 1, "G", 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_nonlinear_cpue_grouped_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double cpue_process_error = in__.scalar_lb_constrain(0);
        vars__.push_back(cpue_process_error);
        double B0_mean = in__.scalar_lub_constrain(get_base1(B0_range, 1, "B0_range", 1), get_base1(B0_range, 2, "B0_range", 1));
        vars__.push_back(B0_mean);
        double lnq_mean = in__.scalar_lub_constrain(get_base1(lnq_range, 1, "lnq_range", 1), get_base1(lnq_range, 2, "lnq_range", 1));
        vars__.push_back(lnq_mean);
        double lns_mean = in__.scalar_lub_constrain(get_base1(lns_range, 1, "lns_range", 1), get_base1(lns_range, 2, "lns_range", 1));
        vars__.push_back(lns_mean);
        double B0_group_logsd = in__.scalar_lb_constrain(0);
        vars__.push_back(B0_group_logsd);
        double lnq_group_sd = in__.scalar_lb_constrain(0);
        vars__.push_back(lnq_group_sd);
        double lns_group_sd = in__.scalar_lb_constrain(0);
        vars__.push_back(lns_group_sd);
        Eigen::Matrix<double, Eigen::Dynamic, 1> B0_raw = in__.vector_lub_constrain(0, get_base1(B0_range, 2, "B0_range", 1), get_base1(G, 1, "G", 1));
        size_t B0_raw_j_1_max__ = get_base1(G, 1, "G", 1);
        for (size_t j_1__ = 0; j_1__ < B0_raw_j_1_max__; ++j_1__) {
            vars__.push_back(B0_raw(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> lnq = in__.vector_lub_constrain(get_base1(lnq_range, 1, "lnq_range", 1), get_base1(lnq_range, 2, "lnq_range", 1), get_base1(G, 2, "G", 1));
        size_t lnq_j_1_max__ = get_base1(G, 2, "G", 1);
        for (size_t j_1__ = 0; j_1__ < lnq_j_1_max__; ++j_1__) {
            vars__.push_back(lnq(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> lns = in__.vector_lub_constrain(get_base1(lns_range, 1, "lns_range", 1), get_base1(lns_range, 2, "lns_range", 1), get_base1(G, 3, "G", 1));
        size_t lns_j_1_max__ = get_base1(G, 3, "G", 1);
        for (size_t j_1__ = 0; j_1__ < lns_j_1_max__; ++j_1__) {
            vars__.push_back(lns(j_1__));
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 102;
            validate_non_negative_index("q", "get_base1(G, 2, \"G\", 1)", get_base1(G, 2, "G", 1));
            Eigen::Matrix<double, Eigen::Dynamic, 1> q(get_base1(G, 2, "G", 1));
            stan::math::initialize(q, DUMMY_VAR__);
            stan::math::fill(q, DUMMY_VAR__);
            current_statement_begin__ = 103;
            validate_non_negative_index("s", "get_base1(G, 3, \"G\", 1)", get_base1(G, 3, "G", 1));
            Eigen::Matrix<double, Eigen::Dynamic, 1> s(get_base1(G, 3, "G", 1));
            stan::math::initialize(s, DUMMY_VAR__);
            stan::math::fill(s, DUMMY_VAR__);
            current_statement_begin__ = 105;
            validate_non_negative_index("B0", "get_base1(G, 1, \"G\", 1)", get_base1(G, 1, "G", 1));
            Eigen::Matrix<double, Eigen::Dynamic, 1> B0(get_base1(G, 1, "G", 1));
            stan::math::initialize(B0, DUMMY_VAR__);
            stan::math::fill(B0, DUMMY_VAR__);
            stan::math::assign(B0,add(B0_raw, total_caught));
            current_statement_begin__ = 106;
            validate_non_negative_index("biomass_ts", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> biomass_ts(N);
            stan::math::initialize(biomass_ts, DUMMY_VAR__);
            stan::math::fill(biomass_ts, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 107;
            for (int i = 1; i <= get_base1(G, 1, "G", 1); ++i) {
                current_statement_begin__ = 108;
                stan::model::assign(biomass_ts, 
                            stan::model::cons_list(stan::model::index_uni(get_base1(gg_start, i, "gg_start", 1)), stan::model::nil_index_list()), 
                            get_base1(B0, i, "B0", 1), 
                            "assigning variable biomass_ts");
                current_statement_begin__ = 109;
                for (int j = 1; j <= (get_base1(gg_length, i, "gg_length", 1) - 1); ++j) {
                    current_statement_begin__ = 112;
                    stan::model::assign(biomass_ts, 
                                stan::model::cons_list(stan::model::index_uni((get_base1(gg_start, i, "gg_start", 1) + j)), stan::model::nil_index_list()), 
                                (get_base1(biomass_ts, ((get_base1(gg_start, i, "gg_start", 1) + j) - 1), "biomass_ts", 1) - get_base1(caught, ((get_base1(gg_start, i, "gg_start", 1) + j) - 1), "caught", 1)), 
                                "assigning variable biomass_ts");
                }
            }
            current_statement_begin__ = 116;
            stan::math::assign(q, stan::math::exp(lnq));
            current_statement_begin__ = 117;
            stan::math::assign(s, stan::math::exp(lns));
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            // write transformed parameters
            if (include_tparams__) {
                size_t q_j_1_max__ = get_base1(G, 2, "G", 1);
                for (size_t j_1__ = 0; j_1__ < q_j_1_max__; ++j_1__) {
                    vars__.push_back(q(j_1__));
                }
                size_t s_j_1_max__ = get_base1(G, 3, "G", 1);
                for (size_t j_1__ = 0; j_1__ < s_j_1_max__; ++j_1__) {
                    vars__.push_back(s(j_1__));
                }
                size_t B0_j_1_max__ = get_base1(G, 1, "G", 1);
                for (size_t j_1__ = 0; j_1__ < B0_j_1_max__; ++j_1__) {
                    vars__.push_back(B0(j_1__));
                }
                size_t biomass_ts_j_1_max__ = N;
                for (size_t j_1__ = 0; j_1__ < biomass_ts_j_1_max__; ++j_1__) {
                    vars__.push_back(biomass_ts(j_1__));
                }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 167;
            validate_non_negative_index("cpue_fit", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> cpue_fit(N);
            stan::math::initialize(cpue_fit, DUMMY_VAR__);
            stan::math::fill(cpue_fit, DUMMY_VAR__);
            // generated quantities statements
            {
            current_statement_begin__ = 169;
            validate_non_negative_index("biomass_expected_ts", "N", N);
            validate_non_negative_index("biomass_expected_ts", "1", 1);
            std::vector<std::vector<local_scalar_t__  >  > biomass_expected_ts(N, std::vector<local_scalar_t__>(1, local_scalar_t__(DUMMY_VAR__)));
            stan::math::initialize(biomass_expected_ts, DUMMY_VAR__);
            stan::math::fill(biomass_expected_ts, DUMMY_VAR__);
            current_statement_begin__ = 170;
            for (int g = 1; g <= get_base1(G, 1, "G", 1); ++g) {
                {
                current_statement_begin__ = 171;
                validate_non_negative_index("dyn_pars", "2", 2);
                std::vector<local_scalar_t__  > dyn_pars(2, local_scalar_t__(DUMMY_VAR__));
                stan::math::initialize(dyn_pars, DUMMY_VAR__);
                stan::math::fill(dyn_pars, DUMMY_VAR__);
                current_statement_begin__ = 172;
                validate_non_negative_index("state", "1", 1);
                std::vector<local_scalar_t__  > state(1, local_scalar_t__(DUMMY_VAR__));
                stan::math::initialize(state, DUMMY_VAR__);
                stan::math::fill(state, DUMMY_VAR__);
                current_statement_begin__ = 173;
                int g_start(0);
                (void) g_start;  // dummy to suppress unused var warning
                stan::math::fill(g_start, std::numeric_limits<int>::min());
                stan::math::assign(g_start,get_base1(gg_start, g, "gg_start", 1));
                current_statement_begin__ = 174;
                int g_end(0);
                (void) g_end;  // dummy to suppress unused var warning
                stan::math::fill(g_end, std::numeric_limits<int>::min());
                stan::math::assign(g_end,get_base1(gg_end, g, "gg_end", 1));
                current_statement_begin__ = 177;
                int B0_current(0);
                (void) B0_current;  // dummy to suppress unused var warning
                stan::math::fill(B0_current, std::numeric_limits<int>::min());
                stan::math::assign(B0_current,get_base1(get_base1(gg, g_start, "gg", 1), 1, "gg", 2));
                current_statement_begin__ = 178;
                int lnq_current(0);
                (void) lnq_current;  // dummy to suppress unused var warning
                stan::math::fill(lnq_current, std::numeric_limits<int>::min());
                stan::math::assign(lnq_current,get_base1(get_base1(gg, g_start, "gg", 1), 2, "gg", 2));
                current_statement_begin__ = 179;
                int lns_current(0);
                (void) lns_current;  // dummy to suppress unused var warning
                stan::math::fill(lns_current, std::numeric_limits<int>::min());
                stan::math::assign(lns_current,get_base1(get_base1(gg, g_start, "gg", 1), 3, "gg", 2));
                current_statement_begin__ = 180;
                stan::model::assign(state, 
                            stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                            get_base1(B0, B0_current, "B0", 1), 
                            "assigning variable state");
                current_statement_begin__ = 181;
                stan::model::assign(dyn_pars, 
                            stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                            get_base1(q, lnq_current, "q", 1), 
                            "assigning variable dyn_pars");
                current_statement_begin__ = 182;
                stan::model::assign(dyn_pars, 
                            stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()), 
                            get_base1(s, lns_current, "s", 1), 
                            "assigning variable dyn_pars");
                current_statement_begin__ = 183;
                stan::model::assign(biomass_expected_ts, 
                            stan::model::cons_list(stan::model::index_min_max(g_start, g_end), stan::model::nil_index_list()), 
                            integrate_ode_rk45(saturating_dynamics_functor__(), state, 0, cumulative_sum(stan::model::rvalue(effort, stan::model::cons_list(stan::model::index_min_max(g_start, g_end), stan::model::nil_index_list()), "effort")), dyn_pars, x_r, x_i, pstream__), 
                            "assigning variable biomass_expected_ts");
                current_statement_begin__ = 185;
                for (int n = g_start; n <= g_end; ++n) {
                    current_statement_begin__ = 186;
                    stan::model::assign(cpue_fit, 
                                stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                ((get_base1(q, lnq_current, "q", 1) * get_base1(get_base1(biomass_expected_ts, n, "biomass_expected_ts", 1), 1, "biomass_expected_ts", 2)) / (1 + ((get_base1(q, lnq_current, "q", 1) / get_base1(s, lns_current, "s", 1)) * get_base1(get_base1(biomass_expected_ts, n, "biomass_expected_ts", 1), 1, "biomass_expected_ts", 2)))), 
                                "assigning variable cpue_fit");
                }
                }
            }
            }
            // validate, write generated quantities
            current_statement_begin__ = 167;
            size_t cpue_fit_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < cpue_fit_j_1_max__; ++j_1__) {
                vars__.push_back(cpue_fit(j_1__));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_nonlinear_cpue_grouped";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "cpue_process_error";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "B0_mean";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "lnq_mean";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "lns_mean";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "B0_group_logsd";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "lnq_group_sd";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "lns_group_sd";
        param_names__.push_back(param_name_stream__.str());
        size_t B0_raw_j_1_max__ = get_base1(G, 1, "G", 1);
        for (size_t j_1__ = 0; j_1__ < B0_raw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "B0_raw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t lnq_j_1_max__ = get_base1(G, 2, "G", 1);
        for (size_t j_1__ = 0; j_1__ < lnq_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "lnq" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t lns_j_1_max__ = get_base1(G, 3, "G", 1);
        for (size_t j_1__ = 0; j_1__ < lns_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "lns" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t q_j_1_max__ = get_base1(G, 2, "G", 1);
            for (size_t j_1__ = 0; j_1__ < q_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "q" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t s_j_1_max__ = get_base1(G, 3, "G", 1);
            for (size_t j_1__ = 0; j_1__ < s_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "s" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t B0_j_1_max__ = get_base1(G, 1, "G", 1);
            for (size_t j_1__ = 0; j_1__ < B0_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "B0" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t biomass_ts_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < biomass_ts_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "biomass_ts" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
        size_t cpue_fit_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < cpue_fit_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "cpue_fit" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "cpue_process_error";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "B0_mean";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "lnq_mean";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "lns_mean";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "B0_group_logsd";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "lnq_group_sd";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "lns_group_sd";
        param_names__.push_back(param_name_stream__.str());
        size_t B0_raw_j_1_max__ = get_base1(G, 1, "G", 1);
        for (size_t j_1__ = 0; j_1__ < B0_raw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "B0_raw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t lnq_j_1_max__ = get_base1(G, 2, "G", 1);
        for (size_t j_1__ = 0; j_1__ < lnq_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "lnq" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t lns_j_1_max__ = get_base1(G, 3, "G", 1);
        for (size_t j_1__ = 0; j_1__ < lns_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "lns" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t q_j_1_max__ = get_base1(G, 2, "G", 1);
            for (size_t j_1__ = 0; j_1__ < q_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "q" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t s_j_1_max__ = get_base1(G, 3, "G", 1);
            for (size_t j_1__ = 0; j_1__ < s_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "s" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t B0_j_1_max__ = get_base1(G, 1, "G", 1);
            for (size_t j_1__ = 0; j_1__ < B0_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "B0" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t biomass_ts_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < biomass_ts_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "biomass_ts" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
        size_t cpue_fit_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < cpue_fit_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "cpue_fit" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
}; // model
}  // namespace
typedef model_nonlinear_cpue_grouped_namespace::model_nonlinear_cpue_grouped stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
